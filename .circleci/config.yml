version: 2.1
jobs:
  install:
    docker:
      - image: cypress/base:12
        environment:
          # this enables colors in the output
          TERM: xterm
    working_directory: ~/portalo
    steps:
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      - checkout
      - run:
          name: Install project dependencies
          command: yarn install --frozen-lockfile

      - save_cache:
          paths:
            - ~/portalo/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          
  build_run:
    docker:
      - image: cypress/base:12
        environment:
          ## this enables colors in the output
          TERM: xterm
    working_directory: ~/portalo
    steps:
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run: 
          name: Compile and start development server on port 3000
          command: yarn startOnPort3000Linux
          background: true
      - run: 
          name: Wait for development server to start
          command: 'yarn wait-on http://localhost:3000'

  test:
    docker:
      - image: cypress/base:12
        environment:
          ## this enables colors in the output
          TERM: xterm
    working_directory: ~/portalo
    steps:
      - run: 
          name: Run routing tests with react-testing-library via yarn test
          command: 'yarn test ~/portalo/src/tests/react-testing-library/routing.test.tsx'
      - run: 
          name: Run e2e tests with Cypruss via cypress run
          command: $(yarn bin)/cypress run

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - install
      - build_run:
          requires:
              - install
      - test:
          requires:
              - build_run

service: portalo

# deplyes each function individually
package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-west-2 # also edit aws-server/lambda/helpers/dbOperations
  memorySize: 256
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: # or straight ARN
            - Fn::GetAtt: ["MyDynamoDbEmployeesTable", "Arn"]

functions:
  graphql:
    handler: graphql/handler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get
        cors: true

resources:
  Resources:
    MyDynamoDbEmployeesTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: Employees
        AttributeDefinitions: 
          - AttributeName: username
            AttributeType: S
        KeySchema: 
          - AttributeName: username
            KeyType: HASH
        TimeToLiveSpecification: 
          AttributeName: ExpirationTime
          Enabled: true
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
          UserPoolName: ${self:provider.stage}-user-pool
          Policies:
            PasswordPolicy:
              MinimumLength: 6
              RequireLowercase: false
              RequireNumbers: true
              RequireSymbols: false
              RequireUppercase: false
          UsernameAttributes:
              - email
          # AutoVerifiedAttributes: # this means it requires verification!!
          #     - email

    CognitoUserPoolClient:  # client that can access the cognito user pool
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: ${self:provider.stage}-user-pool-client
          UserPoolId:
              Ref: CognitoUserPool
          ExplicitAuthFlows:
              - ADMIN_NO_SRP_AUTH
          GenerateSecret: false
          # SupportedIdentityProviders:
          #   - COGNITO
          #   - Facebook
    CognitoUserIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties: 
        IdentityPoolName: ${self:provider.stage}-user-identity-pool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders: 
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
        # SupportedLoginProviders: Json
        # Cannot read property 'authenticated' of undefined
